#!/usr/bin/env ruby
$LOAD_PATH.push File.expand_path('../../lib', __FILE__)

require 'optparse'
require 'rubrowser'
require 'rubrowser/renderer'

options = {
  toolbox: true,
  layout: nil,
  config: nil,
  output: STDOUT
}

OptionParser.new do |opts|
  opts.banner = "Usage: #{__FILE__} [options] [file] ..."

  opts.on(
    '-oFILE',
    '--output=FILE',
    'output file page, if not specified output will be written to stdout'
  ) { |output| options[:output] = output }

  opts.on(
    '-lFILE',
    '--layout=FILE',
    'layout file to apply on the resulting graph'
  ) { |layout| options[:layout] = layout }

  opts.on(
    '-cFILE',
    '--config=FILE',
    'config file'
  ) { |config| options[:config] = config }

  opts.on(
    '-sSERVER:PORT',
    '--server=SERVER:PORT',
    'rubrowser server for execution monitoring'
  ) { |server| options[:server] = server }

  opts.on('-T', '--no-toolbox', 'Don\'t display toolbox on the page') do
    options[:toolbox] = false
  end

  opts.on('-v', '--version', 'Print Rubrowser version') do
    puts "Rubrowser #{Rubrowser::VERSION}"
    exit
  end

  opts.on('-h', '--help', 'Prints this help') do
    puts opts
    exit
  end
end.parse!

options[:files] = ARGV.empty? ? ['.'] : ARGV

Rubrowser::Renderer.call(options)
